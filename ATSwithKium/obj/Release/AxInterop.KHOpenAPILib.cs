//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersion("1.2.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("09/06/2018 17:22:36")]

namespace AxKHOpenAPILib {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{a1574a0d-6bfa-4bd7-9020-ded88711818d}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("OnReceiveTrData")]
    public class AxKHOpenAPI : System.Windows.Forms.AxHost {
        
        private KHOpenAPILib._DKHOpenAPI ocx;
        
        private AxKHOpenAPIEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxKHOpenAPI() : 
                base("a1574a0d-6bfa-4bd7-9020-ded88711818d") {
        }
        
        public event _DKHOpenAPIEvents_OnReceiveTrDataEventHandler OnReceiveTrData;
        
        public event _DKHOpenAPIEvents_OnReceiveRealDataEventHandler OnReceiveRealData;
        
        public event _DKHOpenAPIEvents_OnReceiveMsgEventHandler OnReceiveMsg;
        
        public event _DKHOpenAPIEvents_OnReceiveChejanDataEventHandler OnReceiveChejanData;
        
        public event _DKHOpenAPIEvents_OnEventConnectEventHandler OnEventConnect;
        
        public event _DKHOpenAPIEvents_OnReceiveInvestRealDataEventHandler OnReceiveInvestRealData;
        
        public event _DKHOpenAPIEvents_OnReceiveRealConditionEventHandler OnReceiveRealCondition;
        
        public event _DKHOpenAPIEvents_OnReceiveTrConditionEventHandler OnReceiveTrCondition;
        
        public event _DKHOpenAPIEvents_OnReceiveConditionVerEventHandler OnReceiveConditionVer;
        
        public virtual int CommConnect() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CommConnect", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.CommConnect()));
            return returnValue;
        }
        
        public virtual void CommTerminate() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CommTerminate", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CommTerminate();
        }
        
        public virtual int CommRqData(string sRQName, string sTrCode, int nPrevNext, string sScreenNo) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CommRqData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.CommRqData(sRQName, sTrCode, nPrevNext, sScreenNo)));
            return returnValue;
        }
        
        public virtual string GetLoginInfo(string sTag) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetLoginInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetLoginInfo(sTag)));
            return returnValue;
        }
        
        public virtual int SendOrder(string sRQName, string sScreenNo, string sAccNo, int nOrderType, string sCode, int nQty, int nPrice, string sHogaGb, string sOrgOrderNo) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendOrder", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SendOrder(sRQName, sScreenNo, sAccNo, nOrderType, sCode, nQty, nPrice, sHogaGb, sOrgOrderNo)));
            return returnValue;
        }
        
        public virtual int SendOrderFO(string sRQName, string sScreenNo, string sAccNo, string sCode, int lOrdKind, string sSlbyTp, string sOrdTp, int lQty, string sPrice, string sOrgOrdNo) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendOrderFO", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SendOrderFO(sRQName, sScreenNo, sAccNo, sCode, lOrdKind, sSlbyTp, sOrdTp, lQty, sPrice, sOrgOrdNo)));
            return returnValue;
        }
        
        public virtual void SetInputValue(string sID, string sValue) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetInputValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetInputValue(sID, sValue);
        }
        
        public virtual int SetOutputFID(string sID) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetOutputFID", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetOutputFID(sID)));
            return returnValue;
        }
        
        public virtual string CommGetData(string sJongmokCode, string sRealType, string sFieldName, int nIndex, string sInnerFieldName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CommGetData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.CommGetData(sJongmokCode, sRealType, sFieldName, nIndex, sInnerFieldName)));
            return returnValue;
        }
        
        public virtual void DisconnectRealData(string sScnNo) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DisconnectRealData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DisconnectRealData(sScnNo);
        }
        
        public virtual int GetRepeatCnt(string sTrCode, string sRecordName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetRepeatCnt", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetRepeatCnt(sTrCode, sRecordName)));
            return returnValue;
        }
        
        public virtual int CommKwRqData(string sArrCode, int bNext, int nCodeCount, int nTypeFlag, string sRQName, string sScreenNo) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CommKwRqData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.CommKwRqData(sArrCode, bNext, nCodeCount, nTypeFlag, sRQName, sScreenNo)));
            return returnValue;
        }
        
        public virtual string GetAPIModulePath() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAPIModulePath", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetAPIModulePath()));
            return returnValue;
        }
        
        public virtual string GetCodeListByMarket(string sMarket) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetCodeListByMarket", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetCodeListByMarket(sMarket)));
            return returnValue;
        }
        
        public virtual int GetConnectState() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetConnectState", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetConnectState()));
            return returnValue;
        }
        
        public virtual string GetMasterCodeName(string sTrCode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMasterCodeName", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetMasterCodeName(sTrCode)));
            return returnValue;
        }
        
        public virtual int GetMasterListedStockCnt(string sTrCode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMasterListedStockCnt", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetMasterListedStockCnt(sTrCode)));
            return returnValue;
        }
        
        public virtual string GetMasterConstruction(string sTrCode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMasterConstruction", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetMasterConstruction(sTrCode)));
            return returnValue;
        }
        
        public virtual string GetMasterListedStockDate(string sTrCode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMasterListedStockDate", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetMasterListedStockDate(sTrCode)));
            return returnValue;
        }
        
        public virtual string GetMasterLastPrice(string sTrCode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMasterLastPrice", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetMasterLastPrice(sTrCode)));
            return returnValue;
        }
        
        public virtual string GetMasterStockState(string sTrCode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMasterStockState", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetMasterStockState(sTrCode)));
            return returnValue;
        }
        
        public virtual int GetDataCount(string strRecordName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetDataCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetDataCount(strRecordName)));
            return returnValue;
        }
        
        public virtual string GetOutputValue(string strRecordName, int nRepeatIdx, int nItemIdx) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetOutputValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetOutputValue(strRecordName, nRepeatIdx, nItemIdx)));
            return returnValue;
        }
        
        public virtual string GetCommData(string strTrCode, string strRecordName, int nIndex, string strItemName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetCommData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetCommData(strTrCode, strRecordName, nIndex, strItemName)));
            return returnValue;
        }
        
        public virtual string GetCommRealData(string sTrCode, int nFid) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetCommRealData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetCommRealData(sTrCode, nFid)));
            return returnValue;
        }
        
        public virtual string GetChejanData(int nFid) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetChejanData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetChejanData(nFid)));
            return returnValue;
        }
        
        public virtual string GetThemeGroupList(int nType) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetThemeGroupList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetThemeGroupList(nType)));
            return returnValue;
        }
        
        public virtual string GetThemeGroupCode(string strThemeCode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetThemeGroupCode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetThemeGroupCode(strThemeCode)));
            return returnValue;
        }
        
        public virtual string GetFutureList() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetFutureList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetFutureList()));
            return returnValue;
        }
        
        public virtual string GetFutureCodeByIndex(int nIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetFutureCodeByIndex", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetFutureCodeByIndex(nIndex)));
            return returnValue;
        }
        
        public virtual string GetActPriceList() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetActPriceList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetActPriceList()));
            return returnValue;
        }
        
        public virtual string GetMonthList() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMonthList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetMonthList()));
            return returnValue;
        }
        
        public virtual string GetOptionCode(string strActPrice, int nCp, string strMonth) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetOptionCode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetOptionCode(strActPrice, nCp, strMonth)));
            return returnValue;
        }
        
        public virtual string GetOptionCodeByMonth(string sTrCode, int nCp, string strMonth) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetOptionCodeByMonth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetOptionCodeByMonth(sTrCode, nCp, strMonth)));
            return returnValue;
        }
        
        public virtual string GetOptionCodeByActPrice(string sTrCode, int nCp, int nTick) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetOptionCodeByActPrice", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetOptionCodeByActPrice(sTrCode, nCp, nTick)));
            return returnValue;
        }
        
        public virtual string GetSFutureList(string strBaseAssetCode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSFutureList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetSFutureList(strBaseAssetCode)));
            return returnValue;
        }
        
        public virtual string GetSFutureCodeByIndex(string strBaseAssetCode, int nIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSFutureCodeByIndex", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetSFutureCodeByIndex(strBaseAssetCode, nIndex)));
            return returnValue;
        }
        
        public virtual string GetSActPriceList(string strBaseAssetGb) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSActPriceList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetSActPriceList(strBaseAssetGb)));
            return returnValue;
        }
        
        public virtual string GetSMonthList(string strBaseAssetGb) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSMonthList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetSMonthList(strBaseAssetGb)));
            return returnValue;
        }
        
        public virtual string GetSOptionCode(string strBaseAssetGb, string strActPrice, int nCp, string strMonth) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSOptionCode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetSOptionCode(strBaseAssetGb, strActPrice, nCp, strMonth)));
            return returnValue;
        }
        
        public virtual string GetSOptionCodeByMonth(string strBaseAssetGb, string sTrCode, int nCp, string strMonth) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSOptionCodeByMonth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetSOptionCodeByMonth(strBaseAssetGb, sTrCode, nCp, strMonth)));
            return returnValue;
        }
        
        public virtual string GetSOptionCodeByActPrice(string strBaseAssetGb, string sTrCode, int nCp, int nTick) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSOptionCodeByActPrice", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetSOptionCodeByActPrice(strBaseAssetGb, sTrCode, nCp, nTick)));
            return returnValue;
        }
        
        public virtual string GetSFOBasisAssetList() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSFOBasisAssetList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetSFOBasisAssetList()));
            return returnValue;
        }
        
        public virtual string GetOptionATM() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetOptionATM", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetOptionATM()));
            return returnValue;
        }
        
        public virtual string GetSOptionATM(string strBaseAssetGb) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSOptionATM", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetSOptionATM(strBaseAssetGb)));
            return returnValue;
        }
        
        public virtual string GetBranchCodeName() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetBranchCodeName", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetBranchCodeName()));
            return returnValue;
        }
        
        public virtual int CommInvestRqData(string sMarketGb, string sRQName, string sScreenNo) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CommInvestRqData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.CommInvestRqData(sMarketGb, sRQName, sScreenNo)));
            return returnValue;
        }
        
        public virtual int SendOrderCredit(string sRQName, string sScreenNo, string sAccNo, int nOrderType, string sCode, int nQty, int nPrice, string sHogaGb, string sCreditGb, string sLoanDate, string sOrgOrderNo) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendOrderCredit", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SendOrderCredit(sRQName, sScreenNo, sAccNo, nOrderType, sCode, nQty, nPrice, sHogaGb, sCreditGb, sLoanDate, sOrgOrderNo)));
            return returnValue;
        }
        
        public virtual string KOA_Functions(string sFunctionName, string sParam) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("KOA_Functions", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.KOA_Functions(sFunctionName, sParam)));
            return returnValue;
        }
        
        public virtual int SetInfoData(string sInfoData) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetInfoData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetInfoData(sInfoData)));
            return returnValue;
        }
        
        public virtual int SetRealReg(string strScreenNo, string strCodeList, string strFidList, string strOptType) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetRealReg", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetRealReg(strScreenNo, strCodeList, strFidList, strOptType)));
            return returnValue;
        }
        
        public virtual int GetConditionLoad() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetConditionLoad", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetConditionLoad()));
            return returnValue;
        }
        
        public virtual string GetConditionNameList() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetConditionNameList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetConditionNameList()));
            return returnValue;
        }
        
        public virtual int SendCondition(string strScrNo, string strConditionName, int nIndex, int nSearch) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendCondition", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SendCondition(strScrNo, strConditionName, nIndex, nSearch)));
            return returnValue;
        }
        
        public virtual void SendConditionStop(string strScrNo, string strConditionName, int nIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendConditionStop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SendConditionStop(strScrNo, strConditionName, nIndex);
        }
        
        public virtual object GetCommDataEx(string strTrCode, string strRecordName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetCommDataEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetCommDataEx(strTrCode, strRecordName)));
            return returnValue;
        }
        
        public virtual void SetRealRemove(string strScrNo, string strDelCode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetRealRemove", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetRealRemove(strScrNo, strDelCode);
        }
        
        public virtual int GetMarketType(string sTrCode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMarketType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetMarketType(sTrCode)));
            return returnValue;
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxKHOpenAPIEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(KHOpenAPILib._DKHOpenAPIEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((KHOpenAPILib._DKHOpenAPI)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnOnReceiveTrData(object sender, _DKHOpenAPIEvents_OnReceiveTrDataEvent e) {
            if ((this.OnReceiveTrData != null)) {
                this.OnReceiveTrData(sender, e);
            }
        }
        
        internal void RaiseOnOnReceiveRealData(object sender, _DKHOpenAPIEvents_OnReceiveRealDataEvent e) {
            if ((this.OnReceiveRealData != null)) {
                this.OnReceiveRealData(sender, e);
            }
        }
        
        internal void RaiseOnOnReceiveMsg(object sender, _DKHOpenAPIEvents_OnReceiveMsgEvent e) {
            if ((this.OnReceiveMsg != null)) {
                this.OnReceiveMsg(sender, e);
            }
        }
        
        internal void RaiseOnOnReceiveChejanData(object sender, _DKHOpenAPIEvents_OnReceiveChejanDataEvent e) {
            if ((this.OnReceiveChejanData != null)) {
                this.OnReceiveChejanData(sender, e);
            }
        }
        
        internal void RaiseOnOnEventConnect(object sender, _DKHOpenAPIEvents_OnEventConnectEvent e) {
            if ((this.OnEventConnect != null)) {
                this.OnEventConnect(sender, e);
            }
        }
        
        internal void RaiseOnOnReceiveInvestRealData(object sender, _DKHOpenAPIEvents_OnReceiveInvestRealDataEvent e) {
            if ((this.OnReceiveInvestRealData != null)) {
                this.OnReceiveInvestRealData(sender, e);
            }
        }
        
        internal void RaiseOnOnReceiveRealCondition(object sender, _DKHOpenAPIEvents_OnReceiveRealConditionEvent e) {
            if ((this.OnReceiveRealCondition != null)) {
                this.OnReceiveRealCondition(sender, e);
            }
        }
        
        internal void RaiseOnOnReceiveTrCondition(object sender, _DKHOpenAPIEvents_OnReceiveTrConditionEvent e) {
            if ((this.OnReceiveTrCondition != null)) {
                this.OnReceiveTrCondition(sender, e);
            }
        }
        
        internal void RaiseOnOnReceiveConditionVer(object sender, _DKHOpenAPIEvents_OnReceiveConditionVerEvent e) {
            if ((this.OnReceiveConditionVer != null)) {
                this.OnReceiveConditionVer(sender, e);
            }
        }
    }
    
    public delegate void _DKHOpenAPIEvents_OnReceiveTrDataEventHandler(object sender, _DKHOpenAPIEvents_OnReceiveTrDataEvent e);
    
    public class _DKHOpenAPIEvents_OnReceiveTrDataEvent {
        
        public string sScrNo;
        
        public string sRQName;
        
        public string sTrCode;
        
        public string sRecordName;
        
        public string sPrevNext;
        
        public int nDataLength;
        
        public string sErrorCode;
        
        public string sMessage;
        
        public string sSplmMsg;
        
        public _DKHOpenAPIEvents_OnReceiveTrDataEvent(string sScrNo, string sRQName, string sTrCode, string sRecordName, string sPrevNext, int nDataLength, string sErrorCode, string sMessage, string sSplmMsg) {
            this.sScrNo = sScrNo;
            this.sRQName = sRQName;
            this.sTrCode = sTrCode;
            this.sRecordName = sRecordName;
            this.sPrevNext = sPrevNext;
            this.nDataLength = nDataLength;
            this.sErrorCode = sErrorCode;
            this.sMessage = sMessage;
            this.sSplmMsg = sSplmMsg;
        }
    }
    
    public delegate void _DKHOpenAPIEvents_OnReceiveRealDataEventHandler(object sender, _DKHOpenAPIEvents_OnReceiveRealDataEvent e);
    
    public class _DKHOpenAPIEvents_OnReceiveRealDataEvent {
        
        public string sRealKey;
        
        public string sRealType;
        
        public string sRealData;
        
        public _DKHOpenAPIEvents_OnReceiveRealDataEvent(string sRealKey, string sRealType, string sRealData) {
            this.sRealKey = sRealKey;
            this.sRealType = sRealType;
            this.sRealData = sRealData;
        }
    }
    
    public delegate void _DKHOpenAPIEvents_OnReceiveMsgEventHandler(object sender, _DKHOpenAPIEvents_OnReceiveMsgEvent e);
    
    public class _DKHOpenAPIEvents_OnReceiveMsgEvent {
        
        public string sScrNo;
        
        public string sRQName;
        
        public string sTrCode;
        
        public string sMsg;
        
        public _DKHOpenAPIEvents_OnReceiveMsgEvent(string sScrNo, string sRQName, string sTrCode, string sMsg) {
            this.sScrNo = sScrNo;
            this.sRQName = sRQName;
            this.sTrCode = sTrCode;
            this.sMsg = sMsg;
        }
    }
    
    public delegate void _DKHOpenAPIEvents_OnReceiveChejanDataEventHandler(object sender, _DKHOpenAPIEvents_OnReceiveChejanDataEvent e);
    
    public class _DKHOpenAPIEvents_OnReceiveChejanDataEvent {
        
        public string sGubun;
        
        public int nItemCnt;
        
        public string sFIdList;
        
        public _DKHOpenAPIEvents_OnReceiveChejanDataEvent(string sGubun, int nItemCnt, string sFIdList) {
            this.sGubun = sGubun;
            this.nItemCnt = nItemCnt;
            this.sFIdList = sFIdList;
        }
    }
    
    public delegate void _DKHOpenAPIEvents_OnEventConnectEventHandler(object sender, _DKHOpenAPIEvents_OnEventConnectEvent e);
    
    public class _DKHOpenAPIEvents_OnEventConnectEvent {
        
        public int nErrCode;
        
        public _DKHOpenAPIEvents_OnEventConnectEvent(int nErrCode) {
            this.nErrCode = nErrCode;
        }
    }
    
    public delegate void _DKHOpenAPIEvents_OnReceiveInvestRealDataEventHandler(object sender, _DKHOpenAPIEvents_OnReceiveInvestRealDataEvent e);
    
    public class _DKHOpenAPIEvents_OnReceiveInvestRealDataEvent {
        
        public string sRealKey;
        
        public _DKHOpenAPIEvents_OnReceiveInvestRealDataEvent(string sRealKey) {
            this.sRealKey = sRealKey;
        }
    }
    
    public delegate void _DKHOpenAPIEvents_OnReceiveRealConditionEventHandler(object sender, _DKHOpenAPIEvents_OnReceiveRealConditionEvent e);
    
    public class _DKHOpenAPIEvents_OnReceiveRealConditionEvent {
        
        public string sTrCode;
        
        public string strType;
        
        public string strConditionName;
        
        public string strConditionIndex;
        
        public _DKHOpenAPIEvents_OnReceiveRealConditionEvent(string sTrCode, string strType, string strConditionName, string strConditionIndex) {
            this.sTrCode = sTrCode;
            this.strType = strType;
            this.strConditionName = strConditionName;
            this.strConditionIndex = strConditionIndex;
        }
    }
    
    public delegate void _DKHOpenAPIEvents_OnReceiveTrConditionEventHandler(object sender, _DKHOpenAPIEvents_OnReceiveTrConditionEvent e);
    
    public class _DKHOpenAPIEvents_OnReceiveTrConditionEvent {
        
        public string sScrNo;
        
        public string strCodeList;
        
        public string strConditionName;
        
        public int nIndex;
        
        public int nNext;
        
        public _DKHOpenAPIEvents_OnReceiveTrConditionEvent(string sScrNo, string strCodeList, string strConditionName, int nIndex, int nNext) {
            this.sScrNo = sScrNo;
            this.strCodeList = strCodeList;
            this.strConditionName = strConditionName;
            this.nIndex = nIndex;
            this.nNext = nNext;
        }
    }
    
    public delegate void _DKHOpenAPIEvents_OnReceiveConditionVerEventHandler(object sender, _DKHOpenAPIEvents_OnReceiveConditionVerEvent e);
    
    public class _DKHOpenAPIEvents_OnReceiveConditionVerEvent {
        
        public int lRet;
        
        public string sMsg;
        
        public _DKHOpenAPIEvents_OnReceiveConditionVerEvent(int lRet, string sMsg) {
            this.lRet = lRet;
            this.sMsg = sMsg;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxKHOpenAPIEventMulticaster : KHOpenAPILib._DKHOpenAPIEvents {
        
        private AxKHOpenAPI parent;
        
        public AxKHOpenAPIEventMulticaster(AxKHOpenAPI parent) {
            this.parent = parent;
        }
        
        public virtual void OnReceiveTrData(string sScrNo, string sRQName, string sTrCode, string sRecordName, string sPrevNext, int nDataLength, string sErrorCode, string sMessage, string sSplmMsg) {
            _DKHOpenAPIEvents_OnReceiveTrDataEvent onreceivetrdataEvent = new _DKHOpenAPIEvents_OnReceiveTrDataEvent(sScrNo, sRQName, sTrCode, sRecordName, sPrevNext, nDataLength, sErrorCode, sMessage, sSplmMsg);
            this.parent.RaiseOnOnReceiveTrData(this.parent, onreceivetrdataEvent);
        }
        
        public virtual void OnReceiveRealData(string sRealKey, string sRealType, string sRealData) {
            _DKHOpenAPIEvents_OnReceiveRealDataEvent onreceiverealdataEvent = new _DKHOpenAPIEvents_OnReceiveRealDataEvent(sRealKey, sRealType, sRealData);
            this.parent.RaiseOnOnReceiveRealData(this.parent, onreceiverealdataEvent);
        }
        
        public virtual void OnReceiveMsg(string sScrNo, string sRQName, string sTrCode, string sMsg) {
            _DKHOpenAPIEvents_OnReceiveMsgEvent onreceivemsgEvent = new _DKHOpenAPIEvents_OnReceiveMsgEvent(sScrNo, sRQName, sTrCode, sMsg);
            this.parent.RaiseOnOnReceiveMsg(this.parent, onreceivemsgEvent);
        }
        
        public virtual void OnReceiveChejanData(string sGubun, int nItemCnt, string sFIdList) {
            _DKHOpenAPIEvents_OnReceiveChejanDataEvent onreceivechejandataEvent = new _DKHOpenAPIEvents_OnReceiveChejanDataEvent(sGubun, nItemCnt, sFIdList);
            this.parent.RaiseOnOnReceiveChejanData(this.parent, onreceivechejandataEvent);
        }
        
        public virtual void OnEventConnect(int nErrCode) {
            _DKHOpenAPIEvents_OnEventConnectEvent oneventconnectEvent = new _DKHOpenAPIEvents_OnEventConnectEvent(nErrCode);
            this.parent.RaiseOnOnEventConnect(this.parent, oneventconnectEvent);
        }
        
        public virtual void OnReceiveInvestRealData(string sRealKey) {
            _DKHOpenAPIEvents_OnReceiveInvestRealDataEvent onreceiveinvestrealdataEvent = new _DKHOpenAPIEvents_OnReceiveInvestRealDataEvent(sRealKey);
            this.parent.RaiseOnOnReceiveInvestRealData(this.parent, onreceiveinvestrealdataEvent);
        }
        
        public virtual void OnReceiveRealCondition(string sTrCode, string strType, string strConditionName, string strConditionIndex) {
            _DKHOpenAPIEvents_OnReceiveRealConditionEvent onreceiverealconditionEvent = new _DKHOpenAPIEvents_OnReceiveRealConditionEvent(sTrCode, strType, strConditionName, strConditionIndex);
            this.parent.RaiseOnOnReceiveRealCondition(this.parent, onreceiverealconditionEvent);
        }
        
        public virtual void OnReceiveTrCondition(string sScrNo, string strCodeList, string strConditionName, int nIndex, int nNext) {
            _DKHOpenAPIEvents_OnReceiveTrConditionEvent onreceivetrconditionEvent = new _DKHOpenAPIEvents_OnReceiveTrConditionEvent(sScrNo, strCodeList, strConditionName, nIndex, nNext);
            this.parent.RaiseOnOnReceiveTrCondition(this.parent, onreceivetrconditionEvent);
        }
        
        public virtual void OnReceiveConditionVer(int lRet, string sMsg) {
            _DKHOpenAPIEvents_OnReceiveConditionVerEvent onreceiveconditionverEvent = new _DKHOpenAPIEvents_OnReceiveConditionVerEvent(lRet, sMsg);
            this.parent.RaiseOnOnReceiveConditionVer(this.parent, onreceiveconditionverEvent);
        }
    }
}
